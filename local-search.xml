<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Openwrt+Virtualbox组网教程</title>
    <link href="/2023/12/20/Openwrt-Virtualbox%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/12/20/Openwrt-Virtualbox%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>最近在尝试本地完全虚拟化一个网络用来做测试，主要参考 openwrt 的文档进行配置<br>以下是踩的几个坑</p><ul><li>virtualbox 采用 hostonly adapter 便于宿主机使用 ssh 连接各个子网中的虚拟机，子网 ip 配置为 x.x.x.2</li><li>第一个 adaper 为 lan，第二个接口为 wan，这样对于网关路由器，只需要修改 lan 的 ip 地址为子网地址:.1 即可</li><li>对应主机加入子网，直接连接对应适配器即可。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟化 网络安全 openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息处理函数</title>
    <link href="/2023/11/08/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
    <url>/2023/11/08/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>对于linux内核中的tcp的icmp错误处理代码的解析</p><h2 id="tcp-v4-err"><a href="#tcp-v4-err" class="headerlink" title="tcp_v4_err"></a>tcp_v4_err</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_err</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, u32 info)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> iphdr *)skb-&gt;data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">th</span> =</span> (<span class="hljs-keyword">struct</span> tcphdr *)(skb-&gt;data + (iph-&gt;ihl &lt;&lt; <span class="hljs-number">2</span>));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">tp</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> type = icmp_hdr(skb)-&gt;type;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> code = icmp_hdr(skb)-&gt;code;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sk</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">request_sock</span> *<span class="hljs-title">fastopen</span>;</span><br>u32 seq, snd_una;<br><span class="hljs-type">int</span> err;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span> =</span> dev_net(skb-&gt;dev);<br><br>sk = __inet_lookup_established(net, net-&gt;ipv4.tcp_death_row.hashinfo,<br>       iph-&gt;daddr, th-&gt;dest, iph-&gt;saddr,<br>       ntohs(th-&gt;source), inet_iif(skb), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!sk) &#123;<br>__ICMP_INC_STATS(net, ICMP_MIB_INERRORS);<br><span class="hljs-keyword">return</span> -ENOENT;<br>&#125;<br><span class="hljs-keyword">if</span> (sk-&gt;sk_state == TCP_TIME_WAIT) &#123;<br><span class="hljs-comment">/* To increase the counter of ignored icmps for TCP-AO */</span><br>tcp_ao_ignore_icmp(sk, AF_INET, type, code);<br>inet_twsk_put(inet_twsk(sk));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>seq = ntohl(th-&gt;seq);<br><span class="hljs-keyword">if</span> (sk-&gt;sk_state == TCP_NEW_SYN_RECV) &#123;<br>tcp_req_err(sk, seq, type == ICMP_PARAMETERPROB ||<br>     type == ICMP_TIME_EXCEEDED ||<br>     (type == ICMP_DEST_UNREACH &amp;&amp;<br>      (code == ICMP_NET_UNREACH ||<br>       code == ICMP_HOST_UNREACH)));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (tcp_ao_ignore_icmp(sk, AF_INET, type, code)) &#123;<br>sock_put(sk);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>bh_lock_sock(sk);<br><span class="hljs-comment">/* If too many ICMPs get dropped on busy</span><br><span class="hljs-comment"> * servers this needs to be solved differently.</span><br><span class="hljs-comment"> * We do take care of PMTU discovery (RFC1191) special case :</span><br><span class="hljs-comment"> * we can receive locally generated ICMP messages while socket is held.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (sock_owned_by_user(sk)) &#123;<br><span class="hljs-keyword">if</span> (!(type == ICMP_DEST_UNREACH &amp;&amp; code == ICMP_FRAG_NEEDED))<br>__NET_INC_STATS(net, LINUX_MIB_LOCKDROPPEDICMPS);<br>&#125;<br><span class="hljs-keyword">if</span> (sk-&gt;sk_state == TCP_CLOSE)<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;ip4_min_ttl)) &#123;<br><span class="hljs-comment">/* min_ttl can be changed concurrently from do_ip_setsockopt() */</span><br><span class="hljs-keyword">if</span> (unlikely(iph-&gt;ttl &lt; READ_ONCE(inet_sk(sk)-&gt;min_ttl))) &#123;<br>__NET_INC_STATS(net, LINUX_MIB_TCPMINTTLDROP);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br>&#125;<br><br>tp = tcp_sk(sk);<br><span class="hljs-comment">/* XXX (TFO) - tp-&gt;snd_una should be ISN (tcp_create_openreq_child() */</span><br>fastopen = rcu_dereference(tp-&gt;fastopen_rsk);<br>snd_una = fastopen ? tcp_rsk(fastopen)-&gt;snt_isn : tp-&gt;snd_una;<br><span class="hljs-keyword">if</span> (sk-&gt;sk_state != TCP_LISTEN &amp;&amp;<br>    !between(seq, snd_una, tp-&gt;snd_nxt)) &#123;<br>__NET_INC_STATS(net, LINUX_MIB_OUTOFWINDOWICMPS);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-keyword">switch</span> (type) &#123;<br><span class="hljs-keyword">case</span> ICMP_REDIRECT:<br><span class="hljs-keyword">if</span> (!sock_owned_by_user(sk))<br>do_redirect(skb, sk);<br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-keyword">case</span> ICMP_SOURCE_QUENCH:<br><span class="hljs-comment">/* Just silently ignore these. */</span><br><span class="hljs-keyword">goto</span> out;<br><span class="hljs-keyword">case</span> ICMP_PARAMETERPROB:<br>err = EPROTO;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ICMP_DEST_UNREACH:<br><span class="hljs-keyword">if</span> (code &gt; NR_ICMP_UNREACH)<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-keyword">if</span> (code == ICMP_FRAG_NEEDED) &#123; <span class="hljs-comment">/* PMTU discovery (RFC1191) */</span><br><span class="hljs-comment">/* We are not interested in TCP_LISTEN and open_requests</span><br><span class="hljs-comment"> * (SYN-ACKs send out by Linux are always &lt;576bytes so</span><br><span class="hljs-comment"> * they should go through unfragmented).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (sk-&gt;sk_state == TCP_LISTEN)<br><span class="hljs-keyword">goto</span> out;<br><br>WRITE_ONCE(tp-&gt;mtu_info, info);<br><span class="hljs-keyword">if</span> (!sock_owned_by_user(sk)) &#123;<br>tcp_v4_mtu_reduced(sk);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (!test_and_set_bit(TCP_MTU_REDUCED_DEFERRED, &amp;sk-&gt;sk_tsq_flags))<br>sock_hold(sk);<br>&#125;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br>err = icmp_err_convert[code].errno;<br><span class="hljs-comment">/* check if this ICMP message allows revert of backoff.</span><br><span class="hljs-comment"> * (see RFC 6069)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!fastopen &amp;&amp;<br>    (code == ICMP_NET_UNREACH || code == ICMP_HOST_UNREACH))<br>tcp_ld_RTO_revert(sk, seq);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ICMP_TIME_EXCEEDED:<br>err = EHOSTUNREACH;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-keyword">switch</span> (sk-&gt;sk_state) &#123;<br><span class="hljs-keyword">case</span> TCP_SYN_SENT:<br><span class="hljs-keyword">case</span> TCP_SYN_RECV:<br><span class="hljs-comment">/* Only in fast or simultaneous open. If a fast open socket is</span><br><span class="hljs-comment"> * already accepted it is treated as a connected one below.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (fastopen &amp;&amp; !fastopen-&gt;sk)<br><span class="hljs-keyword">break</span>;<br><br>ip_icmp_error(sk, skb, err, th-&gt;dest, info, (u8 *)th);<br><br><span class="hljs-keyword">if</span> (!sock_owned_by_user(sk)) &#123;<br>WRITE_ONCE(sk-&gt;sk_err, err);<br><br>sk_error_report(sk);<br><br>tcp_done(sk);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>WRITE_ONCE(sk-&gt;sk_err_soft, err);<br>&#125;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-comment">/* If we&#x27;ve already connected we will keep trying</span><br><span class="hljs-comment"> * until we time out, or the user gives up.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * rfc1122 4.2.3.9 allows to consider as hard errors</span><br><span class="hljs-comment"> * only PROTO_UNREACH and PORT_UNREACH (well, FRAG_FAILED too,</span><br><span class="hljs-comment"> * but it is obsoleted by pmtu discovery).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Note, that in modern internet, where routing is unreliable</span><br><span class="hljs-comment"> * and in each dark corner broken firewalls sit, sending random</span><br><span class="hljs-comment"> * errors ordered by their masters even this two messages finally lose</span><br><span class="hljs-comment"> * their original sense (even Linux sends invalid PORT_UNREACHs)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Now we are in compliance with RFCs.</span><br><span class="hljs-comment"> *--ANK (980905)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">if</span> (!sock_owned_by_user(sk) &amp;&amp;<br>    inet_test_bit(RECVERR, sk)) &#123;<br>WRITE_ONCE(sk-&gt;sk_err, err);<br>sk_error_report(sk);<br>&#125; <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">/* Only an error on timeout */</span><br>WRITE_ONCE(sk-&gt;sk_err_soft, err);<br>&#125;<br><br>out:<br>bh_unlock_sock(sk);<br>sock_put(sk);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是 linux 内核用来为 tcp 处理 icmp 消息的函数，它在执行操作之前会检查 icmp 报文中携带的四元组以及 seq 号，要求 seq 号满足如下要求。$$SND.UNA&lt;=SEQ&lt;=SND.NXT$$,当所有报文被确认的时候，这个窗口为 1。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对于旁路盲注攻击的缓解：RFC5961</title>
    <link href="/2023/11/07/RFC5961/"/>
    <url>/2023/11/07/RFC5961/</url>
    
    <content type="html"><![CDATA[<h2 id="RFC5961-之前"><a href="#RFC5961-之前" class="headerlink" title="RFC5961 之前"></a>RFC5961 之前</h2><p>tcp 连接面临旁路攻击者的威胁，旁路攻击者可以通过盲注 RST，ACK，DATA 报文的方式来关闭，重置连接或者注入数据。<br>旁路攻击者与 MITM 攻击者相对，其不在通信链路上，无法窃听到链路上的报文。</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="RST-攻击"><a href="#RST-攻击" class="headerlink" title="RST 攻击"></a>RST 攻击</h4><ul><li><strong>描述</strong>：攻击者发送一个设置了 RST（重置）标志的 TCP 段。</li><li><strong>目的</strong>：通过使接收端认为另一端已发出终止连接的信号，以提前终止 TCP 连接。</li><li><strong>开销</strong>：平均需要$2^{31}/window$个报文完成攻击</li></ul><h4 id="SYN-攻击"><a href="#SYN-攻击" class="headerlink" title="SYN 攻击"></a>SYN 攻击</h4><ul><li><strong>描述</strong>：攻击者发送一个设置了 SYN（同步）标志的 TCP 段。</li><li><strong>目的</strong>：欺骗接收者，使其认为发送者已经发起了一个新的连接请求，导致现有连接状态被拆除。</li><li><strong>开销</strong>：平均需要$2^{31}/window$个报文完成攻击</li></ul><h4 id="数据注入"><a href="#数据注入" class="headerlink" title="数据注入"></a>数据注入</h4><ul><li><strong>描述</strong>：攻击者尝试注入包含有效载荷数据的 TCP 段。</li><li><strong>目的</strong>：破坏正在进行的传输的数据，导致数据完整性问题。</li><li><strong>开销</strong>：平均需要$2^{32}/window$个报文完成攻击，这里因为数据报文需要检验 ACK 字段，即需要满足如下关系$SND.UNA-(2^{31}-1) &lt;= SEG.ACK &lt;= SND.NXT$.对于每个猜测的 SEQ 需要 ACK 空间（32 比特循环群）上的两个元素才能确保被接受。</li></ul><p>过去通常认为这种攻击是不会发生的，因为$2^{32}$的序列空间使得$SEG.SEQ == RCV.NXT$概率极小，但实际并非如此，seq 号只需要命中窗口即可$RCV.NXT &lt;= SEG.SEQ &lt; RCV.NXT+RCV.WND$，攻击者实际上平均只需要$2^{31}/window$个报文即可完成完成攻击。这在当前的接入带宽下是非常容易完成的。</p><h2 id="RFC5961-缓解-1-措施"><a href="#RFC5961-缓解-1-措施" class="headerlink" title="RFC5961 缓解[1]措施"></a>RFC5961 缓解<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="~~TCP 这个白左创造的乌托邦适用的通信协议因为兼容性问题确实难以替代，只能通过这种打补丁的形式来修漏洞。~~">[1]</span></a></sup>措施</h2><h3 id="SYN-攻击的缓解措施"><a href="#SYN-攻击的缓解措施" class="headerlink" title="SYN 攻击的缓解措施"></a>SYN 攻击的缓解措施</h3><ol><li><p><strong>挑战 ACK</strong>:</p><ul><li>不论序列号如何，如果接收到的 TCP 段设置了 SYN 位，TCP 必须向远程对等方发送 ACK 响应（挑战 ACK）。</li><li>发送格式为 <code>&lt;SEQ=SND.NXT&gt;&lt;ACK=RCV.NXT&gt;&lt;CTL=ACK&gt;</code>。</li><li>发送挑战 ACK 后，TCP 必须丢弃该段，并停止进一步处理。</li></ul></li><li><p><strong>合法对等方的行为</strong>:</p><ul><li>合法的对等方在重启后不应在同步状态下有 TCP 控制块（TCB）。</li><li>当挑战 ACK 到达时，如果对等方确实重新启动了，它应响应一个 RST 段，序列号基于引起 RST 的 ACK 字段。</li></ul></li><li><p><strong>伪造 SYN 的处理</strong>:</p><ul><li>伪造的 SYN 将产生一个额外的 ACK。</li><li>远程对等方将这个额外的 ACK 视为重复的 ACK 并丢弃，从而不影响已建立的连接。</li></ul></li><li><p><strong>非放大 ACK 交换</strong>:</p><ul><li>这种缓解措施可能导致非放大的 ACK 交换，即不会增加网络流量的 ACK 响应。</li></ul></li></ol><h3 id="RST-攻击的缓解措施"><a href="#RST-攻击的缓解措施" class="headerlink" title="RST 攻击的缓解措施"></a>RST 攻击的缓解措施</h3><ol><li><p><strong>挑战 ACK</strong>:</p><ul><li>如果 RST 位被设置并且序列号不完全匹配下一个预期的序列值，但在当前接收窗口内，TCP 必须发送一个确认（挑战 ACK）。</li><li>发送格式为 <code>&lt;SEQ=SND.NXT&gt;&lt;ACK=RCV.NXT&gt;&lt;CTL=ACK&gt;</code>。</li><li>发送挑战 ACK 后，TCP 必须丢弃不可接受的段，并停止进一步处理进来的包。接下来的对这个连接的段将正常处理。</li></ul></li><li><p><strong>RST 段的处理</strong>:</p><ul><li>在除 SYN-SENT 外的所有状态中，所有重置（RST）段都通过检查它们的序列号字段来验证。</li><li>如果 RST 段到达并且其序列号字段不匹配下一个预期的序列号但在窗口内，则接收者应该生成一个 ACK。</li><li>在其他所有情况下，如果序列号不匹配且在窗口外，接收者必须默默丢弃该段。</li></ul></li><li><p><strong>远程对等方生成 RST</strong>:</p><ul><li>如果远程对等方确实生成了一个 RST，但它未满足上述标准（RST 序列号在窗口内但不是确切预期的序列号），当挑战 ACK 发回时，它将不再有与此连接相关的传输控制块（TCB），因此根据 RFC 793，远程对等方将发回第二个 RST。</li><li>第二个 RST 的序列号来自入站 ACK 的确认号。如果第二个 RST 到达发送方，将导致连接中止，因为序列号现在完全匹配。</li></ul></li></ol><h3 id="数据注入攻击的缓解措施"><a href="#数据注入攻击的缓解措施" class="headerlink" title="数据注入攻击的缓解措施"></a>数据注入攻击的缓解措施</h3><ol><li><p><strong>ACK 值的校验</strong>:</p><ul><li>所有 TCP 栈都可以实施以下缓解措施。实施此缓解措施的 TCP 栈必须对任何进入的段添加一个额外的输入检查。</li><li>ACK 值只有在 <code>SND.UNA - MAX.SND.WND &lt;= SEG.ACK &lt;= SND.NXT</code> 范围内才被认为是可接受的。</li><li>所有 ACK 值不满足上述条件的进入段必须被丢弃，并且回送一个 ACK。</li></ul></li><li><p><strong>MAX.SND.WND 状态变量</strong>:</p><ul><li>定义一个新的状态变量 MAX.SND.WND，作为本地发送方曾经从其对等方接收到的最大窗口。</li><li>这个小检查将减少攻击者猜测一个有效序列号的脆弱性，因为不仅要猜到窗口内的序列号，还要猜到一个在特定范围内的正确 ACK 值。</li></ul></li><li><p><strong>提高对 FIN 段的健壮性</strong>:</p><ul><li>这种缓解措施还有助于提高对接受伪造 FIN 段（FIN 攻击）的健壮性。</li><li>攻击者也需要让确认号落在上述范围内，以成功伪造一个 FIN 段导致连接关闭。</li></ul></li></ol><h2 id="缓解措施效力"><a href="#缓解措施效力" class="headerlink" title="缓解措施效力"></a>缓解措施效力</h2><p>文档对于这三种对于 tcp 状态机的修改做出了建议，前两种<strong>SHOULD</strong>实现，最后一<strong>MAY</strong>实现。因为数据攻击本身开销较大，所以并不做较强要求。</p><h2 id="安全讨论"><a href="#安全讨论" class="headerlink" title="安全讨论"></a>安全讨论</h2><p>TCP 状态机的这些改变无法保护系统免受中间人攻击。虽然这些改变使得外部攻击者更难注入伪造的 TCP 段，但并不能完全阻止这种攻击。彻底保护 TCP 连接的唯一方法是使用 IPsec 的认证头（AH）或封装安全载荷（ESP）。</p><p>除了在本规范中描述的攻击之外，还有其他攻击手段可供外部攻击者使用，这里描述的对策并不是全面的。特别是，管理员需要知道，伪造的 ICMP 消息可能被用来破坏 TCP 连接或服务质量，这在不同环境下的网络协议栈中可能没有得到充分的关注。处理 ICMP 消息的策略需要根据网络的具体情况来定。</p><p>此外，即使实施了这些缓解措施，如果不处理伪造的 ICMP 消息，那么这些缓解措施可能无法提供足够的保护。这份 RFC 只提供了一部分策略，系统管理员和实施者应该评估其他潜在的攻击手段，并制定相应的防护措施。</p><p>还应该注意，所需的 RST/SYN 缓解技术可能允许进行反射攻击，其中外部攻击者可以引诱受害者针对每个伪造的 RST/SYN 段发送确认 ACK，但这种方法并不会增加攻击流量。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><del>TCP 这个白左创造的乌托邦适用的通信协议因为兼容性问题确实难以替代，只能通过这种打补丁的形式来修漏洞。</del><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>RFC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
